// <auto-generated />
using System;
using Architecture.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Architecture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230612134615_IdentityDBUser")]
    partial class IdentityDBUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Architecture.Models.Donation", b =>
                {
                    b.Property<int>("DONATION_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DONATION_ID"), 1L, 1);

                    b.Property<DateTime>("DATE_RECIEVED")
                        .HasColumnType("datetime2");

                    b.Property<string>("DONATION_DESCRIPTION")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DONATION_NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DONATION_TYPE_ID")
                        .HasColumnType("int");

                    b.Property<int>("SPONSOR_ID")
                        .HasColumnType("int");

                    b.HasKey("DONATION_ID");

                    b.ToTable("DONATION");
                });

            modelBuilder.Entity("Architecture.Models.Inventory", b =>
                {
                    b.Property<int>("INVENTORY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("INVENTORY_ID"), 1L, 1);

                    b.Property<string>("INVENTORY_DESCRIPTION")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INVENTORY_NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("INVENTORY_TYPE_ID")
                        .HasColumnType("int");

                    b.Property<int>("INVENTORY_TYPE_ID1")
                        .HasColumnType("int");

                    b.Property<int>("QUNTITY_ON_HAND")
                        .HasColumnType("int");

                    b.HasKey("INVENTORY_ID");

                    b.HasIndex("INVENTORY_TYPE_ID1");

                    b.ToTable("INVENTORY");
                });

            modelBuilder.Entity("Architecture.Models.InventoryType", b =>
                {
                    b.Property<int>("INVENTORY_TYPE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("INVENTORY_TYPE_ID"), 1L, 1);

                    b.Property<string>("INVENTORY_TYPE_DESCRIPTION")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("INVENTORY_TYPE_ID");

                    b.ToTable("INVENTORY_TYPE");

                    b.HasData(
                        new
                        {
                            INVENTORY_TYPE_ID = 1,
                            INVENTORY_TYPE_DESCRIPTION = "Food"
                        },
                        new
                        {
                            INVENTORY_TYPE_ID = 2,
                            INVENTORY_TYPE_DESCRIPTION = "Cleaning materials"
                        });
                });

            modelBuilder.Entity("Architecture.Models.Inventory", b =>
                {
                    b.HasOne("Architecture.Models.InventoryType", "INVENTORY_TYPE")
                        .WithMany()
                        .HasForeignKey("INVENTORY_TYPE_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("INVENTORY_TYPE");
                });
#pragma warning restore 612, 618
        }
    }
}
